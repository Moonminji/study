[Race Condition (경쟁 상태)]
 : 두 개 이상의 스레드들이 동시에 공유된 자원에 접근하려고 할 때, 동기화 메커니즘 없이 접근하려고하면 실행 결과가 같지 않고 달라지는 상황이 발생한다.
 // 프로세스 동기화 (Process Synchronization) : 공유 자원에 여러 프로세스들이 동시에 접근했을 경우, 데이터 무결성에 문제가 발생.
    공유 데이터에 동시에 접근 시, 처리 순서에 상관 없이 원하는 결과를 얻기 위해 도입됨. ( 데이터 일관성 (Data Consistency) )
 // 임계구역 (Critical Section) : 하나의 프로세스만 접근이 가능하도록 지정 된 공유자원으로써, 경쟁 조건이 발생 할 수 있는 부분의 영역
 
===========================================================================================================================================================================

[Dead Lock (교착 상태)]
 : 프로세스가 자원을 얻지 못해 다음 처리를 하지 못하는 상태로, 시스템적으로 한정된 자원을 여러 곳에서 사용하려고 할 때 발생한다.
   예를 들어, P1과 P2가  리소스 A, B 둘 다를 얻어야 한다고 가정할 때, P1이 리소스 A를 가지고 있고 P2가 리소스 B를 가지고 있으면,
   P1은 리소스 B를, P2는 리소스 A를 기다려야하는데, 서로 원하는 리소스가 상대방에게 할당되어 있기 때문에 이 두 프로세스는 무한정 기다리게 되는데 이러한 상태을 DeadLock상태라고 한다.


[Dead Lock 발생 조건 4가지]
  1) 상호 배제 (Mutual exclusion)
  : 자원은 한 번에 한 프로세스만이 사용할 수 있어야 한다.
  
  2) 점유 대기 (Hold and wait)
  : 최소한 하나의 자원을 점유하고 있으면서 다른 프로세스에 할당되어 사용하고 있는 자원을 추가로 점유하기 위해 대기하는 프로세스가 있어야 한다.
  
  3) 비선점 (No preemption)
  : 다른 프로세스에 할당된 자원은 사용이 끝날 때까지 강제로 빼앗을 수 없어야 한다.
  
  4) 순환 대기 (Circular wait)
  : 프로세스의 집합 {P0, P1, ,…Pn}에서 P0는 P1이 점유한 자원을 대기하고 P1은 P2가 점유한 자원을 대기하고 P2…Pn-1은 Pn이 점유한 자원을 대기하며 Pn은 P0가 점유한 자원을 요구해야 한다.


[Dead Lock 예방 및 회피 방법]
 (1) 교착 상태 예방(Prevention)
  : 교착 상태 발생 조건 중 하나를 제거함으로써 해결하는 방법이지만, 자원의 낭비가 심하다.
      1) 상호 배제 (Mutual exclusion) 부정
      : 여러 개의 프로세스가 공유 자원을 사용할 수 있도록 한다.
      
      2) 점유 대기 (Hold and wait) 부정
      : 프로세스가 실행되기 전 필요한 모든 자원을 할당한다.
      
      3) 비선점 (No preemption) 부정
      : 자원을 점유하고 있는 프로세스가 다른 자원을 요구할 때 점유하고 있는 자원을 반납하고, 요구한 자원을 사용하기 위해 기다리게 한다.
      
      4) 순환 대기 (Circular wait) 부정
      : 자원에 고유한 번호를 할당하고, 번호 순서대로 자원을 요구하도록 한다.


 (2) 교착 상태 회피(Avoidance)
  : 교착 상태가 발생하면 피해나가는 방법
  - 은행원 알고리즘 (Banker’s Algorithm)
     :E,J,Dijkstra가 제안한 방법으로, 은행에서 모든 고객의 요구가 충족되도록 현금을 할당하는 데서 유래한 기법이다.
     프로세스가 자원을 요구할 때 시스템은 자원을 할당한 후에도 안정 상태로 남아있게 되는지를 사전에 검사하여 교착 상태를 회피하는 기법으로써,
     안정 상태에 있으면 자원을 할당하고, 그렇지 않으면 다른 프로세스들이 자원을 해지할 때까지 대기한다.

===========================================================================================================================================================================



[회피 방법]
 1) Semaphore(세마포어)
 공유된 자원의 데이터를 여러 프로세스가 접근하는 것을 막는 것이다. 
 열쇠를 획득하고 (lock) 해제하는 방법으로 임계구역 문제를 제어하는 것으로써, 세마포어가 여러개라면 여러개의 열쇠를 가지고 있는 것과 마찬가지다.
     S = 세마포어 변수
     wait(S) = 열쇠를 가지고 있는지 확인하는 함수 (경쟁 자원 갯수 -1)
     signal(S) = 열쇠를 해제하는 함수 (경쟁 자원 갯수 + 1)
 
 
 2) Mutex(뮤텍스)
 공유된 자원의 데이터를 여러 스레드가 접근하는 것을 막는 방법이다. 
 즉, 임계영역(각 프로세스에서 공유 데이터를 엑세스하는 프로그램 코드 부분)을 가진 스레드들의 Running time이 서로 겹치지 않게 각각 단독으로 실행되게 하는 기술이다. 
 세마포어가 여러 개의 열쇠를 가지고 있을 수 있는 것이라면, 뮤텍스는 오직 한 개의 열쇠만 가지고 있을 수 있다.
 다중 프로세스들이 공유 리소스에 대한 접근을 조율하기 위해 locking과 unloking을 사용한다.



