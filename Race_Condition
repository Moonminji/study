[Race Condition (경쟁 상태)]
 : 두 개 이상의 스레드들이 동시에 공유된 자원에 접근하려고 할 때, 동기화 메커니즘 없이 접근하려고하면 실행 결과가 같지 않고 달라지는 상황이 발생한다.
 // 프로세스 동기화 (Process Synchronization) : 공유 자원에 여러 프로세스들이 동시에 접근했을 경우, 데이터 무결성에 문제가 발생.
    공유 데이터에 동시에 접근 시, 처리 순서에 상관 없이 원하는 결과를 얻기 위해 도입됨. ( 데이터 일관성 (Data Consistency) )
 // 임계구역 (Critical Section) : 하나의 프로세스만 접근이 가능하도록 지정 된 공유자원으로써, 경쟁 조건이 발생 할 수 있는 부분의 영역



[회피 방법]
 1) Semaphore(세마포어)
 공유된 자원의 데이터를 여러 프로세스가 접근하는 것을 막는 것이다. 
 또한 세마포어는 리소스의 상태를 나타내는 간단한 카운터라고 할 수 있는데, 일반적으로 비교적 긴 시간을 확보하는 리소스에 대해 이용하게 되며, 
 운영체제의 리소스를 경쟁적으로 사용하는 다중 프로세스에서 행동을 조정하거나 동기화 시키는 기술이다.
 
 2) Mutex(뮤텍스)
 공유된 자원의 데이터를 여러 스레드가 접근하는 것을 막는 방법이다. 
 즉, 임계영역(각 프로세스에서 공유 데이터를 엑세스하는 프로그램 코드 부분)을 가진 스레드들의 Running time이 서로 겹치지 않게 각각 단독으로 실행되게 하는 기술이다. 
 다중 프로세스들이 공유 리소스에 대한 접근을 조율하기 위해 locking과 unloking을 사용한다.



